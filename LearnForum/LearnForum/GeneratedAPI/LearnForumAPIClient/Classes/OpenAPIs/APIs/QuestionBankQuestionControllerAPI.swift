//
// QuestionBankQuestionControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class QuestionBankQuestionControllerAPI {

    /**
     addQuestionBankQuestion
     
     - parameter questionBankQuestionAddRequest: (body) questionBankQuestionAddRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addQuestionBankQuestionUsingPOST(questionBankQuestionAddRequest: QuestionBankQuestionAddRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponselong?, _ error: Error?) -> Void)) -> RequestTask {
        return addQuestionBankQuestionUsingPOSTWithRequestBuilder(questionBankQuestionAddRequest: questionBankQuestionAddRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     addQuestionBankQuestion
     - POST /api/questionBankQuestion/add
     - parameter questionBankQuestionAddRequest: (body) questionBankQuestionAddRequest 
     - returns: RequestBuilder<BaseResponselong?> 
     */
    open class func addQuestionBankQuestionUsingPOSTWithRequestBuilder(questionBankQuestionAddRequest: QuestionBankQuestionAddRequest) -> RequestBuilder<BaseResponselong?> {
        let localVariablePath = "/api/questionBankQuestion/add"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionBankQuestionAddRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponselong?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     batchAddQuestionsToBank
     
     - parameter questionBankQuestionBatchAddRequest: (body) questionBankQuestionBatchAddRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func batchAddQuestionsToBankUsingPOST(questionBankQuestionBatchAddRequest: QuestionBankQuestionBatchAddRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
        return batchAddQuestionsToBankUsingPOSTWithRequestBuilder(questionBankQuestionBatchAddRequest: questionBankQuestionBatchAddRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     batchAddQuestionsToBank
     - POST /api/questionBankQuestion/add/batch
     - parameter questionBankQuestionBatchAddRequest: (body) questionBankQuestionBatchAddRequest 
     - returns: RequestBuilder<BaseResponseboolean?> 
     */
    open class func batchAddQuestionsToBankUsingPOSTWithRequestBuilder(questionBankQuestionBatchAddRequest: QuestionBankQuestionBatchAddRequest) -> RequestBuilder<BaseResponseboolean?> {
        let localVariablePath = "/api/questionBankQuestion/add/batch"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionBankQuestionBatchAddRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     batchRemoveQuestionsToBank
     
     - parameter questionBankQuestionBatchAddRequest: (body) questionBankQuestionBatchAddRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func batchRemoveQuestionsToBankUsingPOST(questionBankQuestionBatchAddRequest: QuestionBankQuestionBatchAddRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
        return batchRemoveQuestionsToBankUsingPOSTWithRequestBuilder(questionBankQuestionBatchAddRequest: questionBankQuestionBatchAddRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     batchRemoveQuestionsToBank
     - POST /api/questionBankQuestion/remove/batch
     - parameter questionBankQuestionBatchAddRequest: (body) questionBankQuestionBatchAddRequest 
     - returns: RequestBuilder<BaseResponseboolean?> 
     */
    open class func batchRemoveQuestionsToBankUsingPOSTWithRequestBuilder(questionBankQuestionBatchAddRequest: QuestionBankQuestionBatchAddRequest) -> RequestBuilder<BaseResponseboolean?> {
        let localVariablePath = "/api/questionBankQuestion/remove/batch"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionBankQuestionBatchAddRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     deleteQuestionBankQuestion
     
     - parameter deleteRequest: (body) deleteRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteQuestionBankQuestionUsingPOST(deleteRequest: DeleteRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteQuestionBankQuestionUsingPOSTWithRequestBuilder(deleteRequest: deleteRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     deleteQuestionBankQuestion
     - POST /api/questionBankQuestion/delete
     - parameter deleteRequest: (body) deleteRequest 
     - returns: RequestBuilder<BaseResponseboolean?> 
     */
    open class func deleteQuestionBankQuestionUsingPOSTWithRequestBuilder(deleteRequest: DeleteRequest) -> RequestBuilder<BaseResponseboolean?> {
        let localVariablePath = "/api/questionBankQuestion/delete"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     getQuestionBankQuestionVOById
     
     - parameter id: (query) id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getQuestionBankQuestionVOByIdUsingGET(id: Int64? = nil, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseQuestionBankQuestionVO?, _ error: Error?) -> Void)) -> RequestTask {
        return getQuestionBankQuestionVOByIdUsingGETWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     getQuestionBankQuestionVOById
     - GET /api/questionBankQuestion/get/vo
     - parameter id: (query) id (optional)
     - returns: RequestBuilder<BaseResponseQuestionBankQuestionVO> 
     */
    open class func getQuestionBankQuestionVOByIdUsingGETWithRequestBuilder(id: Int64? = nil) -> RequestBuilder<BaseResponseQuestionBankQuestionVO> {
        let localVariablePath = "/api/questionBankQuestion/get/vo"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseQuestionBankQuestionVO>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     listMyQuestionBankQuestionVOByPage
     
     - parameter questionBankQuestionQueryRequest: (body) questionBankQuestionQueryRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listMyQuestionBankQuestionVOByPageUsingPOST(questionBankQuestionQueryRequest: QuestionBankQuestionQueryRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponsePageQuestionBankQuestionVO?, _ error: Error?) -> Void)) -> RequestTask {
        return listMyQuestionBankQuestionVOByPageUsingPOSTWithRequestBuilder(questionBankQuestionQueryRequest: questionBankQuestionQueryRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     listMyQuestionBankQuestionVOByPage
     - POST /api/questionBankQuestion/my/list/page/vo
     - parameter questionBankQuestionQueryRequest: (body) questionBankQuestionQueryRequest 
     - returns: RequestBuilder<BaseResponsePageQuestionBankQuestionVO?> 
     */
    open class func listMyQuestionBankQuestionVOByPageUsingPOSTWithRequestBuilder(questionBankQuestionQueryRequest: QuestionBankQuestionQueryRequest) -> RequestBuilder<BaseResponsePageQuestionBankQuestionVO?> {
        let localVariablePath = "/api/questionBankQuestion/my/list/page/vo"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionBankQuestionQueryRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponsePageQuestionBankQuestionVO?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     listQuestionBankQuestionByPage
     
     - parameter questionBankQuestionQueryRequest: (body) questionBankQuestionQueryRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listQuestionBankQuestionByPageUsingPOST(questionBankQuestionQueryRequest: QuestionBankQuestionQueryRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponsePageQuestionBankQuestion?, _ error: Error?) -> Void)) -> RequestTask {
        return listQuestionBankQuestionByPageUsingPOSTWithRequestBuilder(questionBankQuestionQueryRequest: questionBankQuestionQueryRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     listQuestionBankQuestionByPage
     - POST /api/questionBankQuestion/list/page
     - parameter questionBankQuestionQueryRequest: (body) questionBankQuestionQueryRequest 
     - returns: RequestBuilder<BaseResponsePageQuestionBankQuestion?> 
     */
    open class func listQuestionBankQuestionByPageUsingPOSTWithRequestBuilder(questionBankQuestionQueryRequest: QuestionBankQuestionQueryRequest) -> RequestBuilder<BaseResponsePageQuestionBankQuestion?> {
        let localVariablePath = "/api/questionBankQuestion/list/page"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionBankQuestionQueryRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponsePageQuestionBankQuestion?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     listQuestionBankQuestionVOByPage
     
     - parameter questionBankQuestionQueryRequest: (body) questionBankQuestionQueryRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listQuestionBankQuestionVOByPageUsingPOST(questionBankQuestionQueryRequest: QuestionBankQuestionQueryRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponsePageQuestionBankQuestionVO?, _ error: Error?) -> Void)) -> RequestTask {
        return listQuestionBankQuestionVOByPageUsingPOSTWithRequestBuilder(questionBankQuestionQueryRequest: questionBankQuestionQueryRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     listQuestionBankQuestionVOByPage
     - POST /api/questionBankQuestion/list/page/vo
     - parameter questionBankQuestionQueryRequest: (body) questionBankQuestionQueryRequest 
     - returns: RequestBuilder<BaseResponsePageQuestionBankQuestionVO?> 
     */
    open class func listQuestionBankQuestionVOByPageUsingPOSTWithRequestBuilder(questionBankQuestionQueryRequest: QuestionBankQuestionQueryRequest) -> RequestBuilder<BaseResponsePageQuestionBankQuestionVO?> {
        let localVariablePath = "/api/questionBankQuestion/list/page/vo"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionBankQuestionQueryRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponsePageQuestionBankQuestionVO?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     updateQuestionBankQuestion
     
     - parameter questionBankQuestionUpdateRequest: (body) questionBankQuestionUpdateRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateQuestionBankQuestionUsingPOST(questionBankQuestionUpdateRequest: QuestionBankQuestionUpdateRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
        return updateQuestionBankQuestionUsingPOSTWithRequestBuilder(questionBankQuestionUpdateRequest: questionBankQuestionUpdateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     updateQuestionBankQuestion
     - POST /api/questionBankQuestion/update
     - parameter questionBankQuestionUpdateRequest: (body) questionBankQuestionUpdateRequest 
     - returns: RequestBuilder<BaseResponseboolean?> 
     */
    open class func updateQuestionBankQuestionUsingPOSTWithRequestBuilder(questionBankQuestionUpdateRequest: QuestionBankQuestionUpdateRequest) -> RequestBuilder<BaseResponseboolean?> {
        let localVariablePath = "/api/questionBankQuestion/update"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionBankQuestionUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
