//
// PostControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PostControllerAPI {

    /**
     addPost
     
     - parameter postAddRequest: (body) postAddRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addPostUsingPOST(postAddRequest: PostAddRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponselong?, _ error: Error?) -> Void)) -> RequestTask {
        return addPostUsingPOSTWithRequestBuilder(postAddRequest: postAddRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     addPost
     - POST /api/post/add
     - parameter postAddRequest: (body) postAddRequest 
     - returns: RequestBuilder<BaseResponselong?> 
     */
    open class func addPostUsingPOSTWithRequestBuilder(postAddRequest: PostAddRequest) -> RequestBuilder<BaseResponselong?> {
        let localVariablePath = "/api/post/add"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postAddRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponselong?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     deletePost
     
     - parameter deleteRequest: (body) deleteRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deletePostUsingPOST(deleteRequest: DeleteRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
        return deletePostUsingPOSTWithRequestBuilder(deleteRequest: deleteRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     deletePost
     - POST /api/post/delete
     - parameter deleteRequest: (body) deleteRequest 
     - returns: RequestBuilder<BaseResponseboolean?> 
     */
    open class func deletePostUsingPOSTWithRequestBuilder(deleteRequest: DeleteRequest) -> RequestBuilder<BaseResponseboolean?> {
        let localVariablePath = "/api/post/delete"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     editPost
     
     - parameter postEditRequest: (body) postEditRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func editPostUsingPOST(postEditRequest: PostEditRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
        return editPostUsingPOSTWithRequestBuilder(postEditRequest: postEditRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     editPost
     - POST /api/post/edit
     - parameter postEditRequest: (body) postEditRequest 
     - returns: RequestBuilder<BaseResponseboolean?> 
     */
    open class func editPostUsingPOSTWithRequestBuilder(postEditRequest: PostEditRequest) -> RequestBuilder<BaseResponseboolean?> {
        let localVariablePath = "/api/post/edit"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postEditRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     getPostVOById
     
     - parameter id: (query) id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPostVOByIdUsingGET(id: Int64? = nil, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponsePostVO?, _ error: Error?) -> Void)) -> RequestTask {
        return getPostVOByIdUsingGETWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     getPostVOById
     - GET /api/post/get/vo
     - parameter id: (query) id (optional)
     - returns: RequestBuilder<BaseResponsePostVO> 
     */
    open class func getPostVOByIdUsingGETWithRequestBuilder(id: Int64? = nil) -> RequestBuilder<BaseResponsePostVO> {
        let localVariablePath = "/api/post/get/vo"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponsePostVO>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     listMyPostVOByPage
     
     - parameter postQueryRequest: (body) postQueryRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listMyPostVOByPageUsingPOST(postQueryRequest: PostQueryRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponsePagePostVO?, _ error: Error?) -> Void)) -> RequestTask {
        return listMyPostVOByPageUsingPOSTWithRequestBuilder(postQueryRequest: postQueryRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     listMyPostVOByPage
     - POST /api/post/my/list/page/vo
     - parameter postQueryRequest: (body) postQueryRequest 
     - returns: RequestBuilder<BaseResponsePagePostVO?> 
     */
    open class func listMyPostVOByPageUsingPOSTWithRequestBuilder(postQueryRequest: PostQueryRequest) -> RequestBuilder<BaseResponsePagePostVO?> {
        let localVariablePath = "/api/post/my/list/page/vo"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postQueryRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponsePagePostVO?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     listPostByPage
     
     - parameter postQueryRequest: (body) postQueryRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listPostByPageUsingPOST(postQueryRequest: PostQueryRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponsePagePost?, _ error: Error?) -> Void)) -> RequestTask {
        return listPostByPageUsingPOSTWithRequestBuilder(postQueryRequest: postQueryRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     listPostByPage
     - POST /api/post/list/page
     - parameter postQueryRequest: (body) postQueryRequest 
     - returns: RequestBuilder<BaseResponsePagePost?> 
     */
    open class func listPostByPageUsingPOSTWithRequestBuilder(postQueryRequest: PostQueryRequest) -> RequestBuilder<BaseResponsePagePost?> {
        let localVariablePath = "/api/post/list/page"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postQueryRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponsePagePost?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     listPostVOByPage
     
     - parameter postQueryRequest: (body) postQueryRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listPostVOByPageUsingPOST(postQueryRequest: PostQueryRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponsePagePostVO?, _ error: Error?) -> Void)) -> RequestTask {
        return listPostVOByPageUsingPOSTWithRequestBuilder(postQueryRequest: postQueryRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     listPostVOByPage
     - POST /api/post/list/page/vo
     - parameter postQueryRequest: (body) postQueryRequest 
     - returns: RequestBuilder<BaseResponsePagePostVO?> 
     */
    open class func listPostVOByPageUsingPOSTWithRequestBuilder(postQueryRequest: PostQueryRequest) -> RequestBuilder<BaseResponsePagePostVO?> {
        let localVariablePath = "/api/post/list/page/vo"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postQueryRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponsePagePostVO?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     searchPostVOByPage
     
     - parameter postQueryRequest: (body) postQueryRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchPostVOByPageUsingPOST(postQueryRequest: PostQueryRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponsePagePostVO?, _ error: Error?) -> Void)) -> RequestTask {
        return searchPostVOByPageUsingPOSTWithRequestBuilder(postQueryRequest: postQueryRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     searchPostVOByPage
     - POST /api/post/search/page/vo
     - parameter postQueryRequest: (body) postQueryRequest 
     - returns: RequestBuilder<BaseResponsePagePostVO?> 
     */
    open class func searchPostVOByPageUsingPOSTWithRequestBuilder(postQueryRequest: PostQueryRequest) -> RequestBuilder<BaseResponsePagePostVO?> {
        let localVariablePath = "/api/post/search/page/vo"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postQueryRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponsePagePostVO?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     updatePost
     
     - parameter postUpdateRequest: (body) postUpdateRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updatePostUsingPOST(postUpdateRequest: PostUpdateRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
        return updatePostUsingPOSTWithRequestBuilder(postUpdateRequest: postUpdateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     updatePost
     - POST /api/post/update
     - parameter postUpdateRequest: (body) postUpdateRequest 
     - returns: RequestBuilder<BaseResponseboolean?> 
     */
    open class func updatePostUsingPOSTWithRequestBuilder(postUpdateRequest: PostUpdateRequest) -> RequestBuilder<BaseResponseboolean?> {
        let localVariablePath = "/api/post/update"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
