//
// QuestionBankControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class QuestionBankControllerAPI {

    /**
     addQuestionBank
     
     - parameter questionBankAddRequest: (body) questionBankAddRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addQuestionBankUsingPOST(questionBankAddRequest: QuestionBankAddRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponselong?, _ error: Error?) -> Void)) -> RequestTask {
        return addQuestionBankUsingPOSTWithRequestBuilder(questionBankAddRequest: questionBankAddRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     addQuestionBank
     - POST /api/questionBank/add
     - parameter questionBankAddRequest: (body) questionBankAddRequest 
     - returns: RequestBuilder<BaseResponselong?> 
     */
    open class func addQuestionBankUsingPOSTWithRequestBuilder(questionBankAddRequest: QuestionBankAddRequest) -> RequestBuilder<BaseResponselong?> {
        let localVariablePath = "/api/questionBank/add"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionBankAddRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponselong?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     deleteQuestionBank
     
     - parameter deleteRequest: (body) deleteRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteQuestionBankUsingPOST(deleteRequest: DeleteRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteQuestionBankUsingPOSTWithRequestBuilder(deleteRequest: deleteRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     deleteQuestionBank
     - POST /api/questionBank/delete
     - parameter deleteRequest: (body) deleteRequest 
     - returns: RequestBuilder<BaseResponseboolean?> 
     */
    open class func deleteQuestionBankUsingPOSTWithRequestBuilder(deleteRequest: DeleteRequest) -> RequestBuilder<BaseResponseboolean?> {
        let localVariablePath = "/api/questionBank/delete"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     editQuestionBank
     
     - parameter questionBankEditRequest: (body) questionBankEditRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func editQuestionBankUsingPOST(questionBankEditRequest: QuestionBankEditRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
        return editQuestionBankUsingPOSTWithRequestBuilder(questionBankEditRequest: questionBankEditRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     editQuestionBank
     - POST /api/questionBank/edit
     - parameter questionBankEditRequest: (body) questionBankEditRequest 
     - returns: RequestBuilder<BaseResponseboolean?> 
     */
    open class func editQuestionBankUsingPOSTWithRequestBuilder(questionBankEditRequest: QuestionBankEditRequest) -> RequestBuilder<BaseResponseboolean?> {
        let localVariablePath = "/api/questionBank/edit"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionBankEditRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     getQuestionBankVOById
     
     - parameter current: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter id: (query)  (optional)
     - parameter needQueryQuestionList: (query)  (optional)
     - parameter notId: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter picture: (query)  (optional)
     - parameter searchText: (query)  (optional)
     - parameter sortField: (query)  (optional)
     - parameter sortOrder: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getQuestionBankVOByIdUsingGET(current: Int? = nil, description: String? = nil, id: Int64? = nil, needQueryQuestionList: Bool? = nil, notId: Int64? = nil, pageSize: Int? = nil, picture: String? = nil, searchText: String? = nil, sortField: String? = nil, sortOrder: String? = nil, title: String? = nil, userId: Int64? = nil, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseQuestionBankVO?, _ error: Error?) -> Void)) -> RequestTask {
        return getQuestionBankVOByIdUsingGETWithRequestBuilder(current: current, description: description, id: id, needQueryQuestionList: needQueryQuestionList, notId: notId, pageSize: pageSize, picture: picture, searchText: searchText, sortField: sortField, sortOrder: sortOrder, title: title, userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     getQuestionBankVOById
     - GET /api/questionBank/get/vo
     - parameter current: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter id: (query)  (optional)
     - parameter needQueryQuestionList: (query)  (optional)
     - parameter notId: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter picture: (query)  (optional)
     - parameter searchText: (query)  (optional)
     - parameter sortField: (query)  (optional)
     - parameter sortOrder: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter userId: (query)  (optional)
     - returns: RequestBuilder<BaseResponseQuestionBankVO> 
     */
    open class func getQuestionBankVOByIdUsingGETWithRequestBuilder(current: Int? = nil, description: String? = nil, id: Int64? = nil, needQueryQuestionList: Bool? = nil, notId: Int64? = nil, pageSize: Int? = nil, picture: String? = nil, searchText: String? = nil, sortField: String? = nil, sortOrder: String? = nil, title: String? = nil, userId: Int64? = nil) -> RequestBuilder<BaseResponseQuestionBankVO> {
        let localVariablePath = "/api/questionBank/get/vo"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "current": (wrappedValue: current?.encodeToJSON(), isExplode: false),
            "description": (wrappedValue: description?.encodeToJSON(), isExplode: false),
            "id": (wrappedValue: id?.encodeToJSON(), isExplode: false),
            "needQueryQuestionList": (wrappedValue: needQueryQuestionList?.encodeToJSON(), isExplode: false),
            "notId": (wrappedValue: notId?.encodeToJSON(), isExplode: false),
            "pageSize": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
            "picture": (wrappedValue: picture?.encodeToJSON(), isExplode: false),
            "searchText": (wrappedValue: searchText?.encodeToJSON(), isExplode: false),
            "sortField": (wrappedValue: sortField?.encodeToJSON(), isExplode: false),
            "sortOrder": (wrappedValue: sortOrder?.encodeToJSON(), isExplode: false),
            "title": (wrappedValue: title?.encodeToJSON(), isExplode: false),
            "userId": (wrappedValue: userId?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseQuestionBankVO>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     listMyQuestionBankVOByPage
     
     - parameter questionBankQueryRequest: (body) questionBankQueryRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listMyQuestionBankVOByPageUsingPOST(questionBankQueryRequest: QuestionBankQueryRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponsePageQuestionBankVO?, _ error: Error?) -> Void)) -> RequestTask {
        return listMyQuestionBankVOByPageUsingPOSTWithRequestBuilder(questionBankQueryRequest: questionBankQueryRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     listMyQuestionBankVOByPage
     - POST /api/questionBank/my/list/page/vo
     - parameter questionBankQueryRequest: (body) questionBankQueryRequest 
     - returns: RequestBuilder<BaseResponsePageQuestionBankVO?> 
     */
    open class func listMyQuestionBankVOByPageUsingPOSTWithRequestBuilder(questionBankQueryRequest: QuestionBankQueryRequest) -> RequestBuilder<BaseResponsePageQuestionBankVO?> {
        let localVariablePath = "/api/questionBank/my/list/page/vo"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionBankQueryRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponsePageQuestionBankVO?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     listQuestionBankByPage
     
     - parameter questionBankQueryRequest: (body) questionBankQueryRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listQuestionBankByPageUsingPOST(questionBankQueryRequest: QuestionBankQueryRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponsePageQuestionBank?, _ error: Error?) -> Void)) -> RequestTask {
        return listQuestionBankByPageUsingPOSTWithRequestBuilder(questionBankQueryRequest: questionBankQueryRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     listQuestionBankByPage
     - POST /api/questionBank/list/page
     - parameter questionBankQueryRequest: (body) questionBankQueryRequest 
     - returns: RequestBuilder<BaseResponsePageQuestionBank?> 
     */
    open class func listQuestionBankByPageUsingPOSTWithRequestBuilder(questionBankQueryRequest: QuestionBankQueryRequest) -> RequestBuilder<BaseResponsePageQuestionBank?> {
        let localVariablePath = "/api/questionBank/list/page"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionBankQueryRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponsePageQuestionBank?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     listQuestionBankVOByPage
     
     - parameter questionBankQueryRequest: (body) questionBankQueryRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listQuestionBankVOByPageUsingPOST(questionBankQueryRequest: QuestionBankQueryRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponsePageQuestionBankVO?, _ error: Error?) -> Void)) -> RequestTask {
        return listQuestionBankVOByPageUsingPOSTWithRequestBuilder(questionBankQueryRequest: questionBankQueryRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     listQuestionBankVOByPage
     - POST /api/questionBank/list/page/vo
     - parameter questionBankQueryRequest: (body) questionBankQueryRequest 
     - returns: RequestBuilder<BaseResponsePageQuestionBankVO?> 
     */
    open class func listQuestionBankVOByPageUsingPOSTWithRequestBuilder(questionBankQueryRequest: QuestionBankQueryRequest) -> RequestBuilder<BaseResponsePageQuestionBankVO?> {
        let localVariablePath = "/api/questionBank/list/page/vo"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionBankQueryRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponsePageQuestionBankVO?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     updateQuestionBank
     
     - parameter questionBankUpdateRequest: (body) questionBankUpdateRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateQuestionBankUsingPOST(questionBankUpdateRequest: QuestionBankUpdateRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
        return updateQuestionBankUsingPOSTWithRequestBuilder(questionBankUpdateRequest: questionBankUpdateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     updateQuestionBank
     - POST /api/questionBank/update
     - parameter questionBankUpdateRequest: (body) questionBankUpdateRequest 
     - returns: RequestBuilder<BaseResponseboolean?> 
     */
    open class func updateQuestionBankUsingPOSTWithRequestBuilder(questionBankUpdateRequest: QuestionBankUpdateRequest) -> RequestBuilder<BaseResponseboolean?> {
        let localVariablePath = "/api/questionBank/update"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionBankUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
