//
// UserControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserControllerAPI {

    /**
     addUserSignIn
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addUserSignInUsingPOST(apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
        return addUserSignInUsingPOSTWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     addUserSignIn
     - POST /api/user/add/sign_in
     - returns: RequestBuilder<BaseResponseboolean?> 
     */
    open class func addUserSignInUsingPOSTWithRequestBuilder() -> RequestBuilder<BaseResponseboolean?> {
        let localVariablePath = "/api/user/add/sign_in"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     addUser
     
     - parameter userAddRequest: (body) userAddRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addUserUsingPOST(userAddRequest: UserAddRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponselong?, _ error: Error?) -> Void)) -> RequestTask {
        return addUserUsingPOSTWithRequestBuilder(userAddRequest: userAddRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     addUser
     - POST /api/user/add
     - parameter userAddRequest: (body) userAddRequest 
     - returns: RequestBuilder<BaseResponselong?> 
     */
    open class func addUserUsingPOSTWithRequestBuilder(userAddRequest: UserAddRequest) -> RequestBuilder<BaseResponselong?> {
        let localVariablePath = "/api/user/add"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userAddRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponselong?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     deleteUser
     
     - parameter deleteRequest: (body) deleteRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteUserUsingPOST(deleteRequest: DeleteRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteUserUsingPOSTWithRequestBuilder(deleteRequest: deleteRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     deleteUser
     - POST /api/user/delete
     - parameter deleteRequest: (body) deleteRequest 
     - returns: RequestBuilder<BaseResponseboolean?> 
     */
    open class func deleteUserUsingPOSTWithRequestBuilder(deleteRequest: DeleteRequest) -> RequestBuilder<BaseResponseboolean?> {
        let localVariablePath = "/api/user/delete"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     getLoginUser
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLoginUserUsingGET(apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseLoginUserVO?, _ error: Error?) -> Void)) -> RequestTask {
        return getLoginUserUsingGETWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     getLoginUser
     - GET /api/user/get/login
     - returns: RequestBuilder<BaseResponseLoginUserVO> 
     */
    open class func getLoginUserUsingGETWithRequestBuilder() -> RequestBuilder<BaseResponseLoginUserVO> {
        let localVariablePath = "/api/user/get/login"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseLoginUserVO>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     getUserById
     
     - parameter id: (query) id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserByIdUsingGET(id: Int64? = nil, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseUser?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserByIdUsingGETWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     getUserById
     - GET /api/user/get
     - parameter id: (query) id (optional)
     - returns: RequestBuilder<BaseResponseUser> 
     */
    open class func getUserByIdUsingGETWithRequestBuilder(id: Int64? = nil) -> RequestBuilder<BaseResponseUser> {
        let localVariablePath = "/api/user/get"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseUser>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     getUserSignInRecord
     
     - parameter year: (query) year (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserSignInRecordUsingGET(year: Int? = nil, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseListint?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserSignInRecordUsingGETWithRequestBuilder(year: year).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     getUserSignInRecord
     - GET /api/user/get/sign_in
     - parameter year: (query) year (optional)
     - returns: RequestBuilder<BaseResponseListint> 
     */
    open class func getUserSignInRecordUsingGETWithRequestBuilder(year: Int? = nil) -> RequestBuilder<BaseResponseListint> {
        let localVariablePath = "/api/user/get/sign_in"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "year": (wrappedValue: year?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseListint>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     getUserVOById
     
     - parameter id: (query) id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserVOByIdUsingGET(id: Int64? = nil, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseUserVO?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserVOByIdUsingGETWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     getUserVOById
     - GET /api/user/get/vo
     - parameter id: (query) id (optional)
     - returns: RequestBuilder<BaseResponseUserVO> 
     */
    open class func getUserVOByIdUsingGETWithRequestBuilder(id: Int64? = nil) -> RequestBuilder<BaseResponseUserVO> {
        let localVariablePath = "/api/user/get/vo"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseUserVO>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     listUserByPage
     
     - parameter userQueryRequest: (body) userQueryRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listUserByPageUsingPOST(userQueryRequest: UserQueryRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponsePageUser?, _ error: Error?) -> Void)) -> RequestTask {
        return listUserByPageUsingPOSTWithRequestBuilder(userQueryRequest: userQueryRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     listUserByPage
     - POST /api/user/list/page
     - parameter userQueryRequest: (body) userQueryRequest 
     - returns: RequestBuilder<BaseResponsePageUser?> 
     */
    open class func listUserByPageUsingPOSTWithRequestBuilder(userQueryRequest: UserQueryRequest) -> RequestBuilder<BaseResponsePageUser?> {
        let localVariablePath = "/api/user/list/page"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userQueryRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponsePageUser?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     listUserVOByPage
     
     - parameter userQueryRequest: (body) userQueryRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listUserVOByPageUsingPOST(userQueryRequest: UserQueryRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponsePageUserVO?, _ error: Error?) -> Void)) -> RequestTask {
        return listUserVOByPageUsingPOSTWithRequestBuilder(userQueryRequest: userQueryRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     listUserVOByPage
     - POST /api/user/list/page/vo
     - parameter userQueryRequest: (body) userQueryRequest 
     - returns: RequestBuilder<BaseResponsePageUserVO?> 
     */
    open class func listUserVOByPageUsingPOSTWithRequestBuilder(userQueryRequest: UserQueryRequest) -> RequestBuilder<BaseResponsePageUserVO?> {
        let localVariablePath = "/api/user/list/page/vo"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userQueryRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponsePageUserVO?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     updateMyUser
     
     - parameter userUpdateMyRequest: (body) userUpdateMyRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateMyUserUsingPOST(userUpdateMyRequest: UserUpdateMyRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
        return updateMyUserUsingPOSTWithRequestBuilder(userUpdateMyRequest: userUpdateMyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     updateMyUser
     - POST /api/user/update/my
     - parameter userUpdateMyRequest: (body) userUpdateMyRequest 
     - returns: RequestBuilder<BaseResponseboolean?> 
     */
    open class func updateMyUserUsingPOSTWithRequestBuilder(userUpdateMyRequest: UserUpdateMyRequest) -> RequestBuilder<BaseResponseboolean?> {
        let localVariablePath = "/api/user/update/my"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userUpdateMyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     updateUser
     
     - parameter userUpdateRequest: (body) userUpdateRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateUserUsingPOST(userUpdateRequest: UserUpdateRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
        return updateUserUsingPOSTWithRequestBuilder(userUpdateRequest: userUpdateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     updateUser
     - POST /api/user/update
     - parameter userUpdateRequest: (body) userUpdateRequest 
     - returns: RequestBuilder<BaseResponseboolean?> 
     */
    open class func updateUserUsingPOSTWithRequestBuilder(userUpdateRequest: UserUpdateRequest) -> RequestBuilder<BaseResponseboolean?> {
        let localVariablePath = "/api/user/update"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     userLoginByWxOpen
     
     - parameter code: (query) code 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userLoginByWxOpenUsingGET(code: String, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseLoginUserVO?, _ error: Error?) -> Void)) -> RequestTask {
        return userLoginByWxOpenUsingGETWithRequestBuilder(code: code).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     userLoginByWxOpen
     - GET /api/user/login/wx_open
     - parameter code: (query) code 
     - returns: RequestBuilder<BaseResponseLoginUserVO> 
     */
    open class func userLoginByWxOpenUsingGETWithRequestBuilder(code: String) -> RequestBuilder<BaseResponseLoginUserVO> {
        let localVariablePath = "/api/user/login/wx_open"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "code": (wrappedValue: code.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseLoginUserVO>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     userLogin
     
     - parameter userLoginRequest: (body) userLoginRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userLoginUsingPOST(userLoginRequest: UserLoginRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseLoginUserVO?, _ error: Error?) -> Void)) -> RequestTask {
        return userLoginUsingPOSTWithRequestBuilder(userLoginRequest: userLoginRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     userLogin
     - POST /api/user/login
     - parameter userLoginRequest: (body) userLoginRequest 
     - returns: RequestBuilder<BaseResponseLoginUserVO?> 
     */
    open class func userLoginUsingPOSTWithRequestBuilder(userLoginRequest: UserLoginRequest) -> RequestBuilder<BaseResponseLoginUserVO?> {
        let localVariablePath = "/api/user/login"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userLoginRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseLoginUserVO?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     userLogout
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userLogoutUsingPOST(apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
        return userLogoutUsingPOSTWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     userLogout
     - POST /api/user/logout
     - returns: RequestBuilder<BaseResponseboolean?> 
     */
    open class func userLogoutUsingPOSTWithRequestBuilder() -> RequestBuilder<BaseResponseboolean?> {
        let localVariablePath = "/api/user/logout"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     userRegister
     
     - parameter userRegisterRequest: (body) userRegisterRequest 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userRegisterUsingPOST(userRegisterRequest: UserRegisterRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponselong?, _ error: Error?) -> Void)) -> RequestTask {
        return userRegisterUsingPOSTWithRequestBuilder(userRegisterRequest: userRegisterRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     userRegister
     - POST /api/user/register
     - parameter userRegisterRequest: (body) userRegisterRequest 
     - returns: RequestBuilder<BaseResponselong?> 
     */
    open class func userRegisterUsingPOSTWithRequestBuilder(userRegisterRequest: UserRegisterRequest) -> RequestBuilder<BaseResponselong?> {
        let localVariablePath = "/api/user/register"
        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userRegisterRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseResponselong?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
