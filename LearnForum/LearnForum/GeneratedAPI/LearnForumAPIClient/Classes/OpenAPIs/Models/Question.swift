//
// Question.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Question: Codable, JSONEncodable, Hashable {

    public var answer: String?
    public var content: String?
    public var createTime: Date?
    public var editTime: Date?
    public var favourNum: Int?
    public var id: Int64?
    public var isDelete: Int?
    public var needVip: Int?
    public var priority: Int?
    public var reviewMessage: String?
    public var reviewStatus: Int?
    public var reviewTime: Date?
    public var reviewerId: Int64?
    public var source: String?
    public var tags: String?
    public var thumbNum: Int?
    public var title: String?
    public var updateTime: Date?
    public var userId: Int64?
    public var viewNum: Int?

    public init(answer: String? = nil, content: String? = nil, createTime: Date? = nil, editTime: Date? = nil, favourNum: Int? = nil, id: Int64? = nil, isDelete: Int? = nil, needVip: Int? = nil, priority: Int? = nil, reviewMessage: String? = nil, reviewStatus: Int? = nil, reviewTime: Date? = nil, reviewerId: Int64? = nil, source: String? = nil, tags: String? = nil, thumbNum: Int? = nil, title: String? = nil, updateTime: Date? = nil, userId: Int64? = nil, viewNum: Int? = nil) {
        self.answer = answer
        self.content = content
        self.createTime = createTime
        self.editTime = editTime
        self.favourNum = favourNum
        self.id = id
        self.isDelete = isDelete
        self.needVip = needVip
        self.priority = priority
        self.reviewMessage = reviewMessage
        self.reviewStatus = reviewStatus
        self.reviewTime = reviewTime
        self.reviewerId = reviewerId
        self.source = source
        self.tags = tags
        self.thumbNum = thumbNum
        self.title = title
        self.updateTime = updateTime
        self.userId = userId
        self.viewNum = viewNum
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case answer
        case content
        case createTime
        case editTime
        case favourNum
        case id
        case isDelete
        case needVip
        case priority
        case reviewMessage
        case reviewStatus
        case reviewTime
        case reviewerId
        case source
        case tags
        case thumbNum
        case title
        case updateTime
        case userId
        case viewNum
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(answer, forKey: .answer)
        try container.encodeIfPresent(content, forKey: .content)
        try container.encodeIfPresent(createTime, forKey: .createTime)
        try container.encodeIfPresent(editTime, forKey: .editTime)
        try container.encodeIfPresent(favourNum, forKey: .favourNum)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(isDelete, forKey: .isDelete)
        try container.encodeIfPresent(needVip, forKey: .needVip)
        try container.encodeIfPresent(priority, forKey: .priority)
        try container.encodeIfPresent(reviewMessage, forKey: .reviewMessage)
        try container.encodeIfPresent(reviewStatus, forKey: .reviewStatus)
        try container.encodeIfPresent(reviewTime, forKey: .reviewTime)
        try container.encodeIfPresent(reviewerId, forKey: .reviewerId)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(thumbNum, forKey: .thumbNum)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(updateTime, forKey: .updateTime)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(viewNum, forKey: .viewNum)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension Question: Identifiable {}
