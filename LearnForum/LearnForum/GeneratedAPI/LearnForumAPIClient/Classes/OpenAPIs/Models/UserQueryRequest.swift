//
// UserQueryRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserQueryRequest: Codable, JSONEncodable, Hashable {

    public var current: Int?
    public var id: Int64?
    public var mpOpenId: String?
    public var pageSize: Int?
    public var sortField: String?
    public var sortOrder: String?
    public var unionId: String?
    public var userName: String?
    public var userProfile: String?
    public var userRole: String?

    public init(current: Int? = nil, id: Int64? = nil, mpOpenId: String? = nil, pageSize: Int? = nil, sortField: String? = nil, sortOrder: String? = nil, unionId: String? = nil, userName: String? = nil, userProfile: String? = nil, userRole: String? = nil) {
        self.current = current
        self.id = id
        self.mpOpenId = mpOpenId
        self.pageSize = pageSize
        self.sortField = sortField
        self.sortOrder = sortOrder
        self.unionId = unionId
        self.userName = userName
        self.userProfile = userProfile
        self.userRole = userRole
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case current
        case id
        case mpOpenId
        case pageSize
        case sortField
        case sortOrder
        case unionId
        case userName
        case userProfile
        case userRole
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(current, forKey: .current)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(mpOpenId, forKey: .mpOpenId)
        try container.encodeIfPresent(pageSize, forKey: .pageSize)
        try container.encodeIfPresent(sortField, forKey: .sortField)
        try container.encodeIfPresent(sortOrder, forKey: .sortOrder)
        try container.encodeIfPresent(unionId, forKey: .unionId)
        try container.encodeIfPresent(userName, forKey: .userName)
        try container.encodeIfPresent(userProfile, forKey: .userProfile)
        try container.encodeIfPresent(userRole, forKey: .userRole)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension UserQueryRequest: Identifiable {}
