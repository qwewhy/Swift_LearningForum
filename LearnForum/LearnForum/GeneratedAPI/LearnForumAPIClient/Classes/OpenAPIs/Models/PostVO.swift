//
// PostVO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PostVO: Codable, JSONEncodable, Hashable {

    public var content: String?
    public var createTime: Date?
    public var favourNum: Int?
    public var hasFavour: Bool?
    public var hasThumb: Bool?
    public var id: Int64?
    public var tagList: [String]?
    public var thumbNum: Int?
    public var title: String?
    public var updateTime: Date?
    public var user: UserVO?
    public var userId: Int64?

    public init(content: String? = nil, createTime: Date? = nil, favourNum: Int? = nil, hasFavour: Bool? = nil, hasThumb: Bool? = nil, id: Int64? = nil, tagList: [String]? = nil, thumbNum: Int? = nil, title: String? = nil, updateTime: Date? = nil, user: UserVO? = nil, userId: Int64? = nil) {
        self.content = content
        self.createTime = createTime
        self.favourNum = favourNum
        self.hasFavour = hasFavour
        self.hasThumb = hasThumb
        self.id = id
        self.tagList = tagList
        self.thumbNum = thumbNum
        self.title = title
        self.updateTime = updateTime
        self.user = user
        self.userId = userId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case content
        case createTime
        case favourNum
        case hasFavour
        case hasThumb
        case id
        case tagList
        case thumbNum
        case title
        case updateTime
        case user
        case userId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(content, forKey: .content)
        try container.encodeIfPresent(createTime, forKey: .createTime)
        try container.encodeIfPresent(favourNum, forKey: .favourNum)
        try container.encodeIfPresent(hasFavour, forKey: .hasFavour)
        try container.encodeIfPresent(hasThumb, forKey: .hasThumb)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(tagList, forKey: .tagList)
        try container.encodeIfPresent(thumbNum, forKey: .thumbNum)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(updateTime, forKey: .updateTime)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(userId, forKey: .userId)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension PostVO: Identifiable {}
