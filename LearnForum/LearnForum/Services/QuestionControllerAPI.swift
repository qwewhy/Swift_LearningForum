////
//// QuestionControllerAPI.swift
////
//// Generated by openapi-generator
//// https://openapi-generator.tech
////
//
//import Foundation
//#if canImport(AnyCodable)
//import AnyCodable
//#endif
//
//open class QuestionControllerAPI {
//
//    /**
//     addQuestion
//     
//     - parameter questionAddRequest: (body) questionAddRequest 
//     - parameter apiResponseQueue: The queue on which api response is dispatched.
//     - parameter completion: completion handler to receive the data and the error objects
//     */
//    @discardableResult
//    open class func addQuestionUsingPOST(questionAddRequest: QuestionAddRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponselong?, _ error: Error?) -> Void)) -> RequestTask {
//        return addQuestionUsingPOSTWithRequestBuilder(questionAddRequest: questionAddRequest).execute(apiResponseQueue) { result in
//            switch result {
//            case let .success(response):
//                completion(response.body, nil)
//            case let .failure(error):
//                completion(nil, error)
//            }
//        }
//    }
//
//    /**
//     addQuestion
//     - POST /api/question/add
//     - parameter questionAddRequest: (body) questionAddRequest 
//     - returns: RequestBuilder<BaseResponselong?> 
//     */
//    open class func addQuestionUsingPOSTWithRequestBuilder(questionAddRequest: QuestionAddRequest) -> RequestBuilder<BaseResponselong?> {
//        let localVariablePath = "/api/question/add"
//        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
//        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionAddRequest)
//
//        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
//
//        let localVariableNillableHeaders: [String: Any?] = [
//            "Content-Type": "application/json",
//        ]
//
//        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
//
//        let localVariableRequestBuilder: RequestBuilder<BaseResponselong?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()
//
//        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
//    }
//
//    /**
//     batchDeleteQuestion
//     
//     - parameter questionBatchDeleteRequest: (body) questionBatchDeleteRequest 
//     - parameter apiResponseQueue: The queue on which api response is dispatched.
//     - parameter completion: completion handler to receive the data and the error objects
//     */
//    @discardableResult
//    open class func batchDeleteQuestionUsingPOST(questionBatchDeleteRequest: QuestionBatchDeleteRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
//        return batchDeleteQuestionUsingPOSTWithRequestBuilder(questionBatchDeleteRequest: questionBatchDeleteRequest).execute(apiResponseQueue) { result in
//            switch result {
//            case let .success(response):
//                completion(response.body, nil)
//            case let .failure(error):
//                completion(nil, error)
//            }
//        }
//    }
//
//    /**
//     batchDeleteQuestion
//     - POST /api/question/delete/batch
//     - parameter questionBatchDeleteRequest: (body) questionBatchDeleteRequest 
//     - returns: RequestBuilder<BaseResponseboolean?> 
//     */
//    open class func batchDeleteQuestionUsingPOSTWithRequestBuilder(questionBatchDeleteRequest: QuestionBatchDeleteRequest) -> RequestBuilder<BaseResponseboolean?> {
//        let localVariablePath = "/api/question/delete/batch"
//        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
//        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionBatchDeleteRequest)
//
//        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
//
//        let localVariableNillableHeaders: [String: Any?] = [
//            "Content-Type": "application/json",
//        ]
//
//        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
//
//        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()
//
//        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
//    }
//
//    /**
//     deleteQuestion
//     
//     - parameter deleteRequest: (body) deleteRequest 
//     - parameter apiResponseQueue: The queue on which api response is dispatched.
//     - parameter completion: completion handler to receive the data and the error objects
//     */
//    @discardableResult
//    open class func deleteQuestionUsingPOST(deleteRequest: DeleteRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
//        return deleteQuestionUsingPOSTWithRequestBuilder(deleteRequest: deleteRequest).execute(apiResponseQueue) { result in
//            switch result {
//            case let .success(response):
//                completion(response.body, nil)
//            case let .failure(error):
//                completion(nil, error)
//            }
//        }
//    }
//
//    /**
//     deleteQuestion
//     - POST /api/question/delete
//     - parameter deleteRequest: (body) deleteRequest 
//     - returns: RequestBuilder<BaseResponseboolean?> 
//     */
//    open class func deleteQuestionUsingPOSTWithRequestBuilder(deleteRequest: DeleteRequest) -> RequestBuilder<BaseResponseboolean?> {
//        let localVariablePath = "/api/question/delete"
//        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
//        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteRequest)
//
//        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
//
//        let localVariableNillableHeaders: [String: Any?] = [
//            "Content-Type": "application/json",
//        ]
//
//        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
//
//        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()
//
//        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
//    }
//
//    /**
//     editQuestion
//     
//     - parameter questionEditRequest: (body) questionEditRequest 
//     - parameter apiResponseQueue: The queue on which api response is dispatched.
//     - parameter completion: completion handler to receive the data and the error objects
//     */
//    @discardableResult
//    open class func editQuestionUsingPOST(questionEditRequest: QuestionEditRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
//        return editQuestionUsingPOSTWithRequestBuilder(questionEditRequest: questionEditRequest).execute(apiResponseQueue) { result in
//            switch result {
//            case let .success(response):
//                completion(response.body, nil)
//            case let .failure(error):
//                completion(nil, error)
//            }
//        }
//    }
//
//    /**
//     editQuestion
//     - POST /api/question/edit
//     - parameter questionEditRequest: (body) questionEditRequest 
//     - returns: RequestBuilder<BaseResponseboolean?> 
//     */
//    open class func editQuestionUsingPOSTWithRequestBuilder(questionEditRequest: QuestionEditRequest) -> RequestBuilder<BaseResponseboolean?> {
//        let localVariablePath = "/api/question/edit"
//        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
//        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionEditRequest)
//
//        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
//
//        let localVariableNillableHeaders: [String: Any?] = [
//            "Content-Type": "application/json",
//        ]
//
//        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
//
//        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()
//
//        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
//    }
//
//    /**
//     getQuestionVOById
//     
//     - parameter id: (query) id (optional)
//     - parameter apiResponseQueue: The queue on which api response is dispatched.
//     - parameter completion: completion handler to receive the data and the error objects
//     */
//    @discardableResult
//    open class func getQuestionVOByIdUsingGET(id: Int64? = nil, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseQuestionVO?, _ error: Error?) -> Void)) -> RequestTask {
//        return getQuestionVOByIdUsingGETWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
//            switch result {
//            case let .success(response):
//                completion(response.body, nil)
//            case let .failure(error):
//                completion(nil, error)
//            }
//        }
//    }
//
//    /**
//     getQuestionVOById
//     - GET /api/question/get/vo
//     - parameter id: (query) id (optional)
//     - returns: RequestBuilder<BaseResponseQuestionVO> 
//     */
//    open class func getQuestionVOByIdUsingGETWithRequestBuilder(id: Int64? = nil) -> RequestBuilder<BaseResponseQuestionVO> {
//        let localVariablePath = "/api/question/get/vo"
//        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
//        let localVariableParameters: [String: Any]? = nil
//
//        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
//        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
//            "id": (wrappedValue: id?.encodeToJSON(), isExplode: false),
//        ])
//
//        let localVariableNillableHeaders: [String: Any?] = [
//            :
//        ]
//
//        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
//
//        let localVariableRequestBuilder: RequestBuilder<BaseResponseQuestionVO>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()
//
//        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
//    }
//
//    /**
//     listMyQuestionVOByPage
//     
//     - parameter questionQueryRequest: (body) questionQueryRequest 
//     - parameter apiResponseQueue: The queue on which api response is dispatched.
//     - parameter completion: completion handler to receive the data and the error objects
//     */
//    @discardableResult
//    open class func listMyQuestionVOByPageUsingPOST(questionQueryRequest: QuestionQueryRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponsePageQuestionVO?, _ error: Error?) -> Void)) -> RequestTask {
//        return listMyQuestionVOByPageUsingPOSTWithRequestBuilder(questionQueryRequest: questionQueryRequest).execute(apiResponseQueue) { result in
//            switch result {
//            case let .success(response):
//                completion(response.body, nil)
//            case let .failure(error):
//                completion(nil, error)
//            }
//        }
//    }
//
//    /**
//     listMyQuestionVOByPage
//     - POST /api/question/my/list/page/vo
//     - parameter questionQueryRequest: (body) questionQueryRequest 
//     - returns: RequestBuilder<BaseResponsePageQuestionVO?> 
//     */
//    open class func listMyQuestionVOByPageUsingPOSTWithRequestBuilder(questionQueryRequest: QuestionQueryRequest) -> RequestBuilder<BaseResponsePageQuestionVO?> {
//        let localVariablePath = "/api/question/my/list/page/vo"
//        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
//        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionQueryRequest)
//
//        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
//
//        let localVariableNillableHeaders: [String: Any?] = [
//            "Content-Type": "application/json",
//        ]
//
//        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
//
//        let localVariableRequestBuilder: RequestBuilder<BaseResponsePageQuestionVO?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()
//
//        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
//    }
//
//    /**
//     listQuestionByPage
//     
//     - parameter questionQueryRequest: (body) questionQueryRequest 
//     - parameter apiResponseQueue: The queue on which api response is dispatched.
//     - parameter completion: completion handler to receive the data and the error objects
//     */
//    @discardableResult
//    open class func listQuestionByPageUsingPOST(questionQueryRequest: QuestionQueryRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponsePageQuestion?, _ error: Error?) -> Void)) -> RequestTask {
//        return listQuestionByPageUsingPOSTWithRequestBuilder(questionQueryRequest: questionQueryRequest).execute(apiResponseQueue) { result in
//            switch result {
//            case let .success(response):
//                completion(response.body, nil)
//            case let .failure(error):
//                completion(nil, error)
//            }
//        }
//    }
//
//    /**
//     listQuestionByPage
//     - POST /api/question/list/page
//     - parameter questionQueryRequest: (body) questionQueryRequest 
//     - returns: RequestBuilder<BaseResponsePageQuestion?> 
//     */
//    open class func listQuestionByPageUsingPOSTWithRequestBuilder(questionQueryRequest: QuestionQueryRequest) -> RequestBuilder<BaseResponsePageQuestion?> {
//        let localVariablePath = "/api/question/list/page"
//        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
//        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionQueryRequest)
//
//        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
//
//        let localVariableNillableHeaders: [String: Any?] = [
//            "Content-Type": "application/json",
//        ]
//
//        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
//
//        let localVariableRequestBuilder: RequestBuilder<BaseResponsePageQuestion?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()
//
//        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
//    }
//
//    /**
//     listQuestionVOByPage
//     
//     - parameter questionQueryRequest: (body) questionQueryRequest 
//     - parameter apiResponseQueue: The queue on which api response is dispatched.
//     - parameter completion: completion handler to receive the data and the error objects
//     */
//    @discardableResult
//    open class func listQuestionVOByPageUsingPOST(questionQueryRequest: QuestionQueryRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponsePageQuestionVO?, _ error: Error?) -> Void)) -> RequestTask {
//        return listQuestionVOByPageUsingPOSTWithRequestBuilder(questionQueryRequest: questionQueryRequest).execute(apiResponseQueue) { result in
//            switch result {
//            case let .success(response):
//                completion(response.body, nil)
//            case let .failure(error):
//                completion(nil, error)
//            }
//        }
//    }
//
//    /**
//     listQuestionVOByPage
//     - POST /api/question/list/page/vo
//     - parameter questionQueryRequest: (body) questionQueryRequest 
//     - returns: RequestBuilder<BaseResponsePageQuestionVO?> 
//     */
//    open class func listQuestionVOByPageUsingPOSTWithRequestBuilder(questionQueryRequest: QuestionQueryRequest) -> RequestBuilder<BaseResponsePageQuestionVO?> {
//        let localVariablePath = "/api/question/list/page/vo"
//        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
//        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionQueryRequest)
//
//        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
//
//        let localVariableNillableHeaders: [String: Any?] = [
//            "Content-Type": "application/json",
//        ]
//
//        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
//
//        let localVariableRequestBuilder: RequestBuilder<BaseResponsePageQuestionVO?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()
//
//        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
//    }
//
//    /**
//     searchQuestionVOByPage
//     
//     - parameter questionQueryRequest: (body) questionQueryRequest 
//     - parameter apiResponseQueue: The queue on which api response is dispatched.
//     - parameter completion: completion handler to receive the data and the error objects
//     */
//    @discardableResult
//    open class func searchQuestionVOByPageUsingPOST(questionQueryRequest: QuestionQueryRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponsePageQuestionVO?, _ error: Error?) -> Void)) -> RequestTask {
//        return searchQuestionVOByPageUsingPOSTWithRequestBuilder(questionQueryRequest: questionQueryRequest).execute(apiResponseQueue) { result in
//            switch result {
//            case let .success(response):
//                completion(response.body, nil)
//            case let .failure(error):
//                completion(nil, error)
//            }
//        }
//    }
//
//    /**
//     searchQuestionVOByPage
//     - POST /api/question/search/page/vo
//     - parameter questionQueryRequest: (body) questionQueryRequest 
//     - returns: RequestBuilder<BaseResponsePageQuestionVO?> 
//     */
//    open class func searchQuestionVOByPageUsingPOSTWithRequestBuilder(questionQueryRequest: QuestionQueryRequest) -> RequestBuilder<BaseResponsePageQuestionVO?> {
//        let localVariablePath = "/api/question/search/page/vo"
//        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
//        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionQueryRequest)
//
//        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
//
//        let localVariableNillableHeaders: [String: Any?] = [
//            "Content-Type": "application/json",
//        ]
//
//        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
//
//        let localVariableRequestBuilder: RequestBuilder<BaseResponsePageQuestionVO?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()
//
//        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
//    }
//
//    /**
//     updateQuestion
//     
//     - parameter questionUpdateRequest: (body) questionUpdateRequest 
//     - parameter apiResponseQueue: The queue on which api response is dispatched.
//     - parameter completion: completion handler to receive the data and the error objects
//     */
//    @discardableResult
//    open class func updateQuestionUsingPOST(questionUpdateRequest: QuestionUpdateRequest, apiResponseQueue: DispatchQueue = LearnForumAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseResponseboolean?, _ error: Error?) -> Void)) -> RequestTask {
//        return updateQuestionUsingPOSTWithRequestBuilder(questionUpdateRequest: questionUpdateRequest).execute(apiResponseQueue) { result in
//            switch result {
//            case let .success(response):
//                completion(response.body, nil)
//            case let .failure(error):
//                completion(nil, error)
//            }
//        }
//    }
//
//    /**
//     updateQuestion
//     - POST /api/question/update
//     - parameter questionUpdateRequest: (body) questionUpdateRequest 
//     - returns: RequestBuilder<BaseResponseboolean?> 
//     */
//    open class func updateQuestionUsingPOSTWithRequestBuilder(questionUpdateRequest: QuestionUpdateRequest) -> RequestBuilder<BaseResponseboolean?> {
//        let localVariablePath = "/api/question/update"
//        let localVariableURLString = LearnForumAPIClientAPI.basePath + localVariablePath
//        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: questionUpdateRequest)
//
//        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
//
//        let localVariableNillableHeaders: [String: Any?] = [
//            "Content-Type": "application/json",
//        ]
//
//        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)
//
//        let localVariableRequestBuilder: RequestBuilder<BaseResponseboolean?>.Type = LearnForumAPIClientAPI.requestBuilderFactory.getBuilder()
//
//        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
//    }
//}
